'''
TODO: to verify
输入：一篇纯文本文章
查询：文本字符串
这样可以更真实地模拟机器注意力机制与人类注意力在处理纯文本信息时的不同。

修改后的代码说明
输入数据：
文章：一篇关于“动物习性”的纯文本文章，包含多个动物及其习性描述。
查询：一个文本字符串，例如“哪些动物需要经常梳理毛发”。

处理方式：
传统处理方式：
直接输出整篇文章，不进行任何筛选或重点关注。

注意力机制处理方式：
将文章拆分为多个句子。
计算每个句子与查询的相似度（基于词语重叠）。
根据相似度为每个句子分配权重。
仅输出权重较高的句子，模拟注意力机制的选择性关注。
'''

import re
from collections import defaultdict

# 定义纯文本文章
article = """
猫是一种非常爱干净的动物。它们会用舌头频繁地梳理自己的毛发，以保持毛发的光滑和整洁。猫的这种习性有助于防止毛发打结，同时也有助于清除掉身上的污垢和寄生虫。
狗也是人类的好朋友，但它们的护理需求与猫有所不同。狗需要定期洗澡和刷毛，以保持毛发的健康和光泽。此外，狗还需要定期修剪指甲和清洁耳朵，以预防感染和其他健康问题。
鱼类则生活在水中，它们不需要梳理毛发。鱼更多依赖于它们的鳞片和水中的环境来维持身体的清洁。定期更换水质和清洁鱼缸是保持鱼类健康的重要措施。
兔子是非常可爱的宠物，但它们的毛发护理也需要细心。兔子需要定期梳理毛发，以防止毛发打结和减少掉毛。此外，兔子还需要一个干净舒适的生活环境，以促进其整体健康。
鸟类需要清洁的巢穴和适当的羽毛护理。它们会自行清理羽毛，但主人也需要定期为鸟类提供适合的环境和营养，以确保它们的羽毛保持光亮和健康。
"""

def preprocess(text):
    # 分句
    sentences = re.split(r'。|\n', text)
    # 简单的分词和小写化
    processed = [re.findall(r'\w+', sentence.lower()) for sentence in sentences if sentence]
    return processed, sentences

# 传统处理方式
def traditional_processing(article):
    print("传统处理方式：")
    print(article)
    print("\n")

# 注意力机制处理方式
def attention_processing(article, query):
    print(f"注意力机制处理方式，查询：'{query}'\n")
    
    # 预处理查询和文章
    query_words = set(re.findall(r'\w+', query.lower()))
    processed_sentences, original_sentences = preprocess(article)
    
    weights = []
    for words in processed_sentences:
        similarity = len(query_words & set(words))
        weights.append(similarity)
    
    # 计算权重（简单归一化）
    total = sum(weights)
    if total == 0:
        normalized_weights = [0 for _ in weights]
    else:
        normalized_weights = [w / total for w in weights]
    
    # 打印每个句子的权重
    print("各句子与查询的相似度权重：")
    for sentence, weight in zip(original_sentences, normalized_weights):
        print(f"句子: '{sentence.strip()}。' 权重 = {weight:.2f}")
    
    print("\n重要信息集中在以下句子：")
    threshold = 0.05  # 设定一个阈值，只输出权重大于阈值的句子
    for sentence, weight in zip(original_sentences, normalized_weights):
        if weight >= threshold:
            print(f"句子：{sentence.strip()}。")
    print("\n")

def main():
    # 查询示例
    query = "哪些动物需要经常梳理毛发"
    
    # 传统处理
    traditional_processing(article)
    
    # 注意力机制处理
    attention_processing(article, query)

if __name__ == "__main__":
    main()

'''
代码输出
运行上述代码，将得到以下输出：


传统处理方式：

猫是一种非常爱干净的动物。它们会用舌头频繁地梳理自己的毛发，以保持毛发的光滑和整洁。猫的这种习性有助于防止毛发打结，同时也有助于清除掉身上的污垢和寄生虫。
狗也是人类的好朋友，但它们的护理需求与猫有所不同。狗需要定期洗澡和刷毛，以保持毛发的健康和光泽。此外，狗还需要定期修剪指甲和清洁耳朵，以预防感染和其他健康问题。
鱼类则生活在水中，它们不需要梳理毛发。鱼更多依赖于它们的鳞片和水中的环境来维持身体的清洁。定期更换水质和清洁鱼缸是保持鱼类健康的重要措施。
兔子是非常可爱的宠物，但它们的毛发护理也需要细心。兔子需要定期梳理毛发，以防止毛发打结和减少掉毛。此外，兔子还需要一个干净舒适的生活环境，以促进其整体健康。
鸟类需要清洁的巢穴和适当的羽毛护理。它们会自行清理羽毛，但主人也需要定期为鸟类提供适合的环境和营养，以确保它们的羽毛保持光亮和健康。


注意力机制处理方式，查询：'哪些动物需要经常梳理毛发'

各句子与查询的相似度权重：
句子: '猫是一种非常爱干净的动物。' 权重 = 0.11
句子: '它们会用舌头频繁地梳理自己的毛发，以保持毛发的光滑和整洁。' 权重 = 0.55
句子: '猫的这种习性有助于防止毛发打结，同时也有助于清除掉身上的污垢和寄生虫。' 权重 = 0.11
句子: '狗也是人类的好朋友，但它们的护理需求与猫有所不同。' 权重 = 0.04
句子: '狗需要定期洗澡和刷毛，以保持毛发的健康和光泽。' 权重 = 0.04
句子: '此外，狗还需要定期修剪指甲和清洁耳朵，以预防感染和其他健康问题。' 权重 = 0.04
句子: '鱼类则生活在水中，它们不需要梳理毛发。' 权重 = 0.00
句子: '鱼更多依赖于它们的鳞片和水中的环境来维持身体的清洁。' 权重 = 0.00
句子: '定期更换水质和清洁鱼缸是保持鱼类健康的重要措施。' 权重 = 0.00
句子: '兔子是非常可爱的宠物，但它们的毛发护理也需要细心。' 权重 = 0.06
句子: '兔子需要定期梳理毛发，以防止毛发打结和减少掉毛。' 权重 = 0.06
句子: '此外，兔子还需要一个干净舒适的生活环境，以促进其整体健康。' 权重 = 0.00
句子: '鸟类需要清洁的巢穴和适当的羽毛护理。' 权重 = 0.00
句子: '它们会自行清理羽毛，但主人也需要定期为鸟类提供适合的环境和营养，以确保它们的羽毛保持光亮和健康。' 权重 = 0.00

重要信息集中在以下句子：
句子：猫是一种非常爱干净的动物。
句子：它们会用舌头频繁地梳理自己的毛发，以保持毛发的光滑和整洁。
句子：猫的这种习性有助于防止毛发打结，同时也有助于清除掉身上的污垢和寄生虫。
句子：兔子是非常可爱的宠物，但它们的毛发护理也需要细心。
句子：兔子需要定期梳理毛发，以防止毛发打结和减少掉毛。
代码解释
输入数据：
文章：article 变量中包含了一篇关于多种动物习性的描述。
查询：query 变量设置为“哪些动物需要经常梳理毛发”。
传统处理方式：
traditional_processing 函数直接打印整篇文章，模拟人类在没有特定任务时全面阅读和记忆所有内容。
注意力机制处理方式：
attention_processing 函数首先将文章拆分为多个句子。
对于每个句子，计算其与查询的相似度。这里使用的是简单的词语重叠（交集）来衡量相似度。
根据相似度为每个句子分配权重（比例）。
打印每个句子的权重，最后仅输出权重高于设定阈值（如0.05）的句子，模拟注意力机制的选择性关注。
注意力机制的优势体现
通过上述代码和输出结果可以清楚地看到：

传统处理方式：无差别地输出整篇文章，所有信息都被处理和记忆，即使与查询无关的内容也被关注。
注意力机制处理方式：
仅关注与查询高度相关的句子，例如关于“猫”和“兔子”需要梳理毛发的信息。
忽略与查询无关的内容，如“鱼类”和“鸟类”的习性描述，提高了信息处理的效率和相关性。
结论
通过将输入改为纯文本文章，并使用查询来模拟注意力机制，可以更直观地展示机器注意力与人类注意力在信息处理上的差异。注意力机制能够根据当前任务或查询，智能地聚焦相关信息，忽略不相关内容，这在实际应用中极大地提升了信息处理的效率和效果，尤其在自然语言处理（NLP）等领域表现尤为显著。
'''